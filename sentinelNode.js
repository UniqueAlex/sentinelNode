//哨兵节点存在的意义
//在数组a中查找key，返回key所在的位置
//代码一：
//n为数组长度,key为要查找的值
let a = [4, 2, 3, 5, 9, 6], n = 6, key = 7;

function find(a, n, key){
    if(a === null || n <= 0){
        return -1;
    }

    let i = 0;
    //此处复杂度是2n
    while (i < n){
        if(a[i] === key){
            return i;
        }
        ++i;
    }

    return -1;
}

//优化之后
function bestFind(a, n, key){
    if(a === null || n <= 0){
        return -1;
    }
    
    //此处为了增加哨兵，要把最后一个元素替换成哨兵，但是最后要保证数组不会改变，所以要把最后一个元素保存起来。
    //但是如果最后一个元素恰好等于要找的元素，是要返回的。
    if(a[n-1] == key){
        return n-1
    }
     //此处为了增加哨兵，要把最后一个元素替换成哨兵，但是最后要保证数组不会改变，所以要把最后一个元素保存起来。
    let tmp = a[n-1];
    //把最后一个元素替换成哨兵，此时a=[4, 2, 3, 5, 9, 7]
    a[n-1] = key;
    //此处的while少了一次执行，性能提高，当某个元素等于key时，循环会停止，得到当前i的值，如果在数组中找不到key，循环到最后一次时，循环也会停止。
    let i = 0;
    while(a[i] != key){
        ++1
    }
    //恢复最后一个元素
    a[n-1] = tmp;
    
    if(i === n-1){ //说明已经循环到最后一个元素了，在数组中没有找到key
        return -1;
    } else{
        return i;
    }
}
